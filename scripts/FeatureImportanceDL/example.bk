def create_dataset(dataset, look_back=3, time_step=3):
  dataX, dataY = [], []
  for i in range(len(dataset)- look_back - time_step - 1):
    a = np.array(dataset[i:(i + look_back), : 33])
    # dataX.append(np.array(dataset[i:(i + look_back), : 33]))
    dataX.append(a.flatten())
    dataY.append(dataset[i + look_back + time_step, 33:])
	
  return np.array(dataX), np.array(dataY)


# Read data
df = pd.read_csv("data.csv", index_col = 0)
df = df.dropna()
df["memusedcat"] = pd.cut(df["%memused"], bins = [0, 85, 100], labels=[0, 1])

one_hot = pd.get_dummies(df["memusedcat"])
df = df.drop("memusedcat", axis = 1)
df = df.join(one_hot)

columns_req_norm = df.columns[:33]
scaler = MinMaxScaler()
df[columns_req_norm] = scaler.fit_transform(df[columns_req_norm])

values = df.values
dataX, dataY = create_dataset(values, 3, 3)

min = dataX.shape[0]

indices_with_class_list = []

for i in range(2):
  indices_with_class = np.where(dataY[:, i] == 1)[0]
  indices_with_class_list.append(indices_with_class)

  if len(indices_with_class) < min:
    min = len(indices_with_class)

to_be_removed = []

for i in range(2):
  count_to_be_removed = len(indices_with_class_list[i]) - min

  to_be_removed.extend(np.random.choice(indices_with_class_list[i], size = count_to_be_removed, replace=False))

dataX = np.delete(dataX, to_be_removed, axis = 0)
dataY = np.delete(dataY, to_be_removed, axis = 0)

from sklearn.utils import shuffle
dataX, dataY = shuffle(dataX, dataY, random_state = 0)

train_data_ratio = 0.80
val_data_ratio = 0.05
train_data_size = int(dataX.shape[0] * train_data_ratio)
val_data_size = int(dataX.shape[0] * val_data_ratio)

X_tr = dataX[:train_data_size]
y_tr = dataY[:train_data_size]

X_val = dataX[train_data_size:train_data_size + val_data_size]
y_val = dataY[train_data_size:train_data_size + val_data_size]

X_test = dataX[train_data_size + val_data_size:]
y_test = dataY[train_data_size + val_data_size:]

N_TRAIN_SAMPLES = train_data_size
N_VAL_SAMPLES = val_data_size
N_TEST_SAMPLES = dataX.shape[0] - (train_data_size + val_data_size)
N_FEATURES = 99
FEATURE_SHAPE = (99,)
dataset_label = "MEM_"